# chapter 1 (Applying geometric transformations on images)

# import cv2
# img = cv2.imread('./sendtodali.png', cv2.IMREAD_GRAYSCALE)
# cv2.imshow('Input image', img)
# cv2.imwrite('./grayscale.png',img)
# cv2.waitKey()

# import cv2
# myimg = './sendtodali.png'
# img = cv2.imread(myimg)
# yuv_img = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
# cv2.imshow('Y channel', yuv_img[:, :, 0])
# cv2.imshow('U channel', yuv_img[:, :, 1])
# cv2.imshow('V channel', yuv_img[:, :, 2])
# cv2.waitKey()





# # Image Translation

# import cv2
# import numpy as np 

# xUnits = eval(input("Enter x units to be moved :") )
# yUnits = eval(input("Enter y units to be moved :") )
# x1Units = eval(input("Enter x1 units to be moved :") )
# y1Units = eval(input("Enter y1 units to be moved :") )
# # [eg. 70,110,-30,-50]
# img = cv2.imread('./sendtodali.png')  # Read Image 
# num_rows, num_cols = img.shape[:2]   # Determine row and column size

# translation_matrix = np.float32([[1,0,xUnits],[0,1,yUnits]])  # Using numpy to create a translation Matrix

# img_translation = cv2.warpAffine(img, translation_matrix, ( num_cols + xUnits , num_rows + yUnits ))  # Apply the translation and get a full window

# translation_matrix = np.float32([[1,0,(x1Units)],[0,1,(y1Units)]])

# img_translation = cv2.warpAffine(img_translation, translation_matrix, (num_cols + xUnits - x1Units , num_rows + yUnits - y1Units ))

# img_scale = cv2.resize(img, (660,460), interpolation = cv2.INTER_AREA)

# img_translation_scale = cv2.resize(img_translation, (660,460), interpolation = cv2.INTER_AREA)

# cv2.imshow('input', img_scale)
# cv2.imshow('Translate', img_translation_scale)
# Image Translation

# import cv2
# import numpy as np 

# xUnits = eval(input("Enter x units to be moved :") )
# yUnits = eval(input("Enter y units to be moved :") )
# x1Units = eval(input("Enter x1 units to be moved :") )
# y1Units = eval(input("Enter y1 units to be moved :") )
# # [eg. 70,110,-30,-50]
# img = cv2.imread('./sendtodali.png')  # Read Image 
# num_rows, num_cols = img.shape[:2]   # Determine row and column size

# translation_matrix = np.float32([[1,0,xUnits],[0,1,yUnits]])  # Using numpy to create a translation Matrix

# img_translation = cv2.warpAffine(img, translation_matrix, ( num_cols + xUnits , num_rows + yUnits ))  # Apply the translation and get a full window

# translation_matrix = np.float32([[1,0,(x1Units)],[0,1,(y1Units)]])

# img_translation = cv2.warpAffine(img_translation, translation_matrix, (num_cols + xUnits - x1Units , num_rows + yUnits - y1Units ))

# img_scale = cv2.resize(img, (660,460), interpolation = cv2.INTER_AREA)

# img_translation_scale = cv2.resize(img_translation, (660,460), interpolation = cv2.INTER_AREA)

# cv2.imshow('input', img_scale)
# cv2.imshow('Translate', img_translation_scale)

# cv2.waitKey()
# cv2.waitKey()


# Image rotation 

# import cv2

# img = cv2.imread('sendtodali.png')

# row, col = img.shape[:2]

# rotation_matrix = cv2.getRotationMatrix2D((col/2,row/2), 80, 1)

# img_rotation = cv2.warpAffine(img, rotation_matrix, (col,row))

# cv2.imshow('Rotation 90Deg' , img_rotation)
# cv2.waitKey()



# import cv2
# import numpy as np

# img = cv2.imread('sendtodali.png')
# num_rows, num_cols = img.shape[:2]
# translation_matrix = np.float32([ [1,0,int(0.5*num_cols)],[0,1,int(0.5*num_rows)] ])
# rotation_matrix = cv2.getRotationMatrix2D((num_cols, num_rows), 30, 1)
# img_translation = cv2.warpAffine(img, translation_matrix, (2*num_cols, 2*num_rows))
# img_rotation = cv2.warpAffine(img_translation, rotation_matrix,(2*num_cols, 2*num_rows))


# cv2.imshow('Rotation', img_rotation)
# cv2.waitKey()




# import cv2
# import numpy as np

# img = cv2.imread('sendtodali.png')
# row,col = img.shape[:2]
# translation_matrix = np.float32([[1,0,70], [0,1,110]])
# img_translation = cv2.warpAffine(img, translation_matrix, (col + 70,row + 110))
# translation_matrix = np.float32([[1,0,-30], [0,1,-50]])
# img_center = cv2.warpAffine(img_translation, translation_matrix, (col + 70 ,row + 110 ))

# # Image rotation
# rotation_matrix = cv2.getRotationMatrix2D((col/2,row/2), 30, 0.5 )

# img_rotation = cv2.warpAffine(img_center, rotation_matrix, ((col + 70 ),(row + 110 )))

# cv2.imshow('Rotated Image' , img_rotation)
# cv2.waitKey()




# translating the matrix 

# import cv2
# import numpy as np 


# img = cv2.imread('sendtodali.png')
# row, col = img.shape[:2]
# translation_matrix = np.float32([[1,0,(0.5*col)],[0,1,-(0.5*row)]]) 
# img_translation = cv2.warpAffine(img, translation_matrix, (col,row))
# cv2.imshow('translation', img_translation)
# cv2.waitKey()

# Image interpolation example : skewing method
# import cv2

# img = cv2.imread('sendtodali.png')

# img_skewed = cv2.resize(img, (600,450), interpolation = cv2.INTER_AREA)

# cv2.imshow('Skewed Image',img_skewed)

# cv2.waitKey()



# Affine Transformation

# import cv2
# import numpy as np

# daliImg = cv2.imread('sendtodali.png')
# height,width = daliImg.shape[:2]
# first_point = np.float32([[0,0],[width-1,0],[0,height-1]])
# affine_point = np.float32([ [0,0],[0.5*(width-1),0],[(0.5*(width-1)),height-1] ])
# matrix_affine = cv2.getAffineTransform(first_point, affine_point)
# affine_img = cv2.warpAffine(daliImg, matrix_affine, (width,height))
# cv2.imshow('Output',affine_img)
# cv2.waitKey()



# import cv2
# import numpy as np

# img = cv2.imread('sendtodali.png')
# height,width = img.shape[:2]

# input_point = np.float32([ [0,0], [width-1,0] , [0,height-1] ])
# output_point = np.float32([ [width-1,0] , [0,0], [width-1,height-1] ])

# affine_matrix = cv2.getAffineTransform(input_point, output_point)

# affine_image = cv2.warpAffine(img, affine_matrix, (width,height))

# cv2.imshow('parallelogram', affine_image)

# cv2.waitKey()



# Projection transformation : 

# import cv2 
# import numpy as np

# img = cv2.imread('sendtodali.png')
# row,col = img.shape[:2]

# input_point = np.float32([[0,0],[col-1,0],[0,row-1],[col-1,row-1]])
# output_point = np.float32([[0,0.3*(row-1)],[col-1,0],[0,0.7*(row-1)],[(col-1),row-1]])

# projection_matrix = cv2.getPerspectiveTransform(input_point,output_point)

# projection_image = cv2.warpPerspective(img, projection_matrix, (col,row))
# cv2.imshow('Prpjection', projection_image)
# cv2.waitKey()



# Exercise Projection 
# import cv2
# import numpy as np
# img = cv2.imread('sendtodali.png')
# cv2.imshow('Input', img)

# height, width = img.shape[:2]
# control_point = np.float32([[0,0],[width-1,0],[0,height-1],[width-1,height-1]])
# output_contol_point = np.float32([[0,0],[width-1,0.3*(height-1)],[0,height-1],[width-1,0.7*(height-1)]])
# projection_matrix = cv2.getPerspectiveTransform(control_point,output_contol_point)
# projection_img = cv2.warpPerspective(img, projection_matrix, (width,height))
# cv2.imshow('Output', projection_img)
# cv2.imwrite('./SendTele.png', projection_img)
# cv2.waitKey()





# import cv2
# import numpy as np

# img = cv2.imread('sendtodali.png')
# height,width = img.shape[0:2]

# first_point = np.float32([[0,0],[width-1,0],[0,height-1],[width-1,height-1]])
# second_point = np.float32([[0,0],[width-1,0.3*(height-1)],[0,height-1],[(width-1),0.7*(height-1)]])

# matrix_homopraphy = cv2.getPerspectiveTransform(first_point,second_point)

# homography_img = cv2.warpPerspective(img, matrix_homopraphy, (width,height))
# homography_scale = cv2.resize(homography_img, (550,450), interpolation = cv2.INTER_AREA)

# cv2.imshow('homograph', homography_scale)
# cv2.waitKey()





# Image Warping 

# import cv2
# import numpy as np
# import math

# img = cv2.imread('sendtodali.png')
# rows, cols = img.shape[:2]
# #####################
# # Vertical wave

# img_output = np.zeros(img.shape, dtype=img.dtype)


# for i in range(rows):
#     for j in range(cols):
#         offset_x = int(25.0 * math.sin(2 * 3.14 * i / 180))
#         offset_y = 0
#         if j+offset_x < rows:
#             img_output[i,j] = img[i,(j+offset_x)%cols]
#         else:
#             img_output[i,j] = 0


# scale_image = cv2.resize(img_output, (550,450), interpolation = cv2.INTER_AREA)



# cv2.imshow('Vertical wave', scale_image)
# cv2.waitKey()




# Chapter 2 (Edge detection and Image filtering)

# Kernel Matrix and Low pass filtering


# import cv2
# import numpy as np

# img = cv2.imread('sendtodali.png')
# # height,width = img.shape[0:2]

# # blur_matrix = np.ones((5,5), np.float32) / 25   # Normalizing image 
# # blur_image = cv2.filter2D(img, -1, blur_matrix)


# blur_image = cv2.blur(img, (4,4))
# cv2.imshow('Output', blur_image)
# cv2.waitKey()



# import cv2
# import numpy as np

# img = cv2.imread('sendtodali.png')
# # height,width = img.shape[:2]

# blur_matrix = np.ones((4,4),np.float32) / 16
# blur_image = cv2.filter2D(img,-1, blur_matrix)
# cv2.imshow('Blur4x4', blur_image)
# cv2.waitKey()


# Edge Detection 

# Sobel filter (Horizontal edge detection)
# import cv2


# img = cv2.imread('shapes.png')
# height,width = img.shape[:2] 
# horizontal_edge_Detection = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=3)  
# img_scale = cv2.resize(horizontal_edge_Detection, (int(0.5*(width-1)),int(0.5*(height-1))), interpolation= cv2.INTER_AREA )
# cv2.imshow('Detect Horizontal Edge', img_scale)
# cv2.waitKey()





# Laplacian filter (detects both edges)

# import cv2
# img = cv2.imread('bus.png')
# # laplacian = cv2.Laplacian(img, cv2.CV_64F)
# # cv2.imshow('Laplacian Edge detector', laplacian)

# canny filter method (Better than the other two)

# canny = cv2.Canny(img,10,150)
# cv2.imshow('Canny Edge Detector',  canny )
# cv2.waitKey()


# Blurring and edge detection practice 

# import cv2
# import numpy as np

# img = cv2.imread('bus.png')
# # normalize_matrix = np.ones((5,5), np.float32) / 25
# # blur_image = cv2.filter2D(img, -1, normalize_matrix)
# # cv2.imshow('Blur image', blur_image)

# # blur_image2 = cv2.blur(img, (4,4))
# # cv2.imshow('Blur image2', blur_image2)

# edge1 = cv2.Sobel(img, cv2.CV_64F, 1,0, ksize=1)
# cv2.imshow('Horizontal Edge Detection', edge1)




# cv2.waitKey()


# import cv2

# img = cv2.imread('shapes.png')
# # laplacian_image = cv2.Laplacian(img, cv2.CV_64F)
# # cv2.imshow('Laplacian' , laplacian_image)
# # cv2.waitKey()

# canny_image = cv2.Canny(img, 30,350)
# cv2.imshow('canny Image', canny_image)
# cv2.waitKey()




# Motion Blur 

# import cv2
# import numpy as np


# img = cv2.imread('herbert.jpg')
# # Generating the kernel
# size = 15
# kernel_matrix_blur = np.zeros((size,size), dtype = img.dtype)
# kernel_matrix_blur[int(0.5*(size-1)), 0: ] = np.ones(size)
# kernel_matrix_blur = kernel_matrix_blur / size # Normalize matrix 

# output=cv2.filter2D(img, -1 , kernel_matrix_blur)
# cv2.imshow('Motion blur', output)
# cv2.waitKey()


# motion blur 

#
# generating kernel

# motion_blur_array = np.zeros((size,size))
# motion_blur_array[int(0.5*(size-1)), 0: ] = np.ones(size)
# motion_blur_array = motion_blur_array / size # Normalizing array

# img_scale = cv2.resize(img, (int(0.5*(width-1)),int(0.5*(height-1))), interpolation=cv2.INTER_AREA)

# apply_blur = cv2.filter2D(img_scale, -1, motion_blur_array)

# cv2.imshow('Output', apply_blur)
# cv2.waitKey()


# read on , John Von Newmann inheritance and Othomatter theory /// Computer Architecture 


#Image Enhancing 

# # Program for Contrasting Images ( Sum of entries must be 1 to acheive this ) 
# import cv2
# import numpy as np

# img = cv2.imread('herbert.jpg')
# height, width = img.shape[:2]

# center_entry = eval(input('Enter the center kernel entry :'))
# num_side = eval(input('Enter number used for kernel side entries :'))
# dark_pattern = eval(input('Enter the constant of darkening in kernel matrix : '))

# contrast_array = np.array([[(num_side),(num_side),(num_side)], [(num_side),int(center_entry),(num_side)], [(num_side),(num_side),(num_side)]]) / dark_pattern

# contrast_image = cv2.filter2D(img, -1, contrast_array)

# img_canny = cv2.Canny(contrast_image, 50, 100)
# # img_canny = contrast_image 

# contrast_image_scale = cv2.resize(img_canny, (int(0.8*(width-1)),int(0.8*(height-1))), interpolation = cv2.INTER_AREA)


# cv2.imshow('contrast', contrast_image_scale)
# cv2.imwrite('Edge Detection2.png', contrast_image_scale)
# cv2.waitKey()


# Embossing  ( Sum of entries must be 0 to acheive this )

# import cv2
# import numpy as np

# img = cv2.imread('herbert.jpg')

# kernel = np.array([[0,0,0],[-1,-1,0],[1,1,0]])
# apply_k = cv2.filter2D(img, -1, kernel)
# cv2.imshow('Kernel', apply_k)
# cv2.waitKey()

# import cv2
# import numpy as np 

# img = cv2.imread('herbert.jpg')

# enhance_matrix = [
#     [-1,-1,-1,-1,-1],
#     [-1,2,2,2,-1],
#     [-1, 2, 7, 2, -1],
#      [-1,2,2,2,-1],
#       [-1,-1,-1,-1,-1]
# ]

# matrix_array = np.array(enhance_matrix) / 14
# matrix_picture = cv2.filter2D(img, -1, matrix_array)
# cv2.imshow('input', img)
# cv2.imshow('Edge', matrix_picture)

# cv2.waitKey()



# import cv2
# import numpy as np

# img = cv2.imread('herbert.jpg')
# height,width = img.shape[:2]

# contrast_enhancement = eval(input('Enter degree of contractness : '))

# kernel_matrix = [
#     [-1,-1,-1,-1,-1],
#     [-1, 2, 2, 2,-1],
#     [-1, 2, contrast_enhancement, 2,-1],
#     [-1, 2, 2, 2,-1],
#     [-1,-1,-1,-1,-1]

#        ]

# normalization_matrix = np.array(kernel_matrix) / contrast_enhancement

# kernel_image =  cv2.filter2D(img, -1, normalization_matrix)

# img_scale = cv2.resize(img, (int(0.5*(width-1)),int(0.5*(height-1))), interpolation=cv2.INTER_AREA)

# kernel_image_scale = cv2.resize(kernel_image, (int(0.5*(width-1)),int(0.5*(height-1))), interpolation=cv2.INTER_AREA)

# cv2.imshow('Input', img_scale)
# cv2.imshow('Output', kernel_image_scale)


# cv2.waitKey()


# import cv2
# import numpy as  np

# img = cv2.imread('SinClair.jpeg', cv2.COLOR_BGR2RGBA)
# height, width = img.shape[:2]

# my_array = np.array([
# [-1,-1,-1],
# [-1, 9,-1],
# [-1,-1,-1]

# ])

# my_array_normalize = my_array * 2

# image_array = cv2.filter2D(img, -1 , my_array_normalize)

# cv2.imshow('Img', image_array)
# cv2.imshow('Img2', img)

# cv2.waitKey()






# embossing 

# import cv2
# import numpy as np

# img = cv2.imread('SinClair.jpeg', cv2.COLOR_BGR2GRAY)

# emboss_array = np.array([
#     [  1,  0,  0],
#     [ -1,  0,  1],
#     [ -1,  -1,  2]
# ]
# ) 

# emboss_image = cv2.filter2D(img, -1, emboss_array) 

# cv2.imshow('emboss', emboss_image)

# cv2.waitKey()

 # erosion

# import cv2
# import numpy as np

# img = cv2.imread('morph.png')

# my_array = np.array([[1,1,1],[1,1,1],[1,1,1]]) 
# my_array_erode = cv2.erode(img, my_array, iterations = 5)

# cv2.imshow('img', my_array_erode)
# cv2.waitKey()

# Creating a vignette filter 

# import cv2
# import numpy as np 

# img = cv2.imread('flower.png')
# height, width = img.shape[:2]

# kernel_x = cv2.getGaussianKernel(width, 150)
# kernel_y = cv2.getGaussianKernel(height, 150)

# kernel = kernel_x * kernel_y.T

# mask = 255 * kernel / np.linalg.norm(kernel)

# output = np.copy(img)
# mask = np.transpose(mask)  

# for i in range(3):
#     output[:, :,i] = output[:, :,i] * mask


# img_scale = cv2.resize(img , (int(0.5*(width-1)), int(0.5*(height-1))), interpolation = cv2.INTER_AREA )
# output_scale = cv2.resize(output , (int(0.5*(width-1)), int(0.5*(height-1))), interpolation = cv2.INTER_AREA )

# cv2.imshow('Original', img_scale)
# cv2.imshow('Vignette Filter', output_scale)

# print('height', height)
# print('width', width)
# cv2.waitKey() 



# import cv2
# import numpy as np


# img = cv2.imread('tree.png')
# height, width = img.shape[:2]

# direction_x = cv2.getGaussianKernel(width, 90)
# direction_y = cv2.getGaussianKernel(height, 90)

# kernel = direction_x * direction_y.T

# mask = 255 * kernel / np.linalg.norm(kernel) 

# output = np.copy(img)

# mask = np.transpose(mask)

# for i in range(3):
#     output[:,:,i] =  output[:,:,i] * mask 

# scale_output = cv2.resize(output, None, fx= 4, fy= 4, interpolation= cv2.INTER_LINEAR)
# scale_output = cv2.resize(output, None, fx= 4, fy= 4, interpolation= cv2.INTER_CUBIC)

# cv2.imshow('Output', scale_output)
# cv2.waitKey()


# Vignette filter focusing // 
# import cv2 
# import numpy as np
# img = cv2.imread('flower.png')
# height, width = img.shape[:2]
# gaussian_x = cv2.getGaussianKernel(int(1.5*(width)), 150)
# gaussian_y = cv2.getGaussianKernel(int(1.5*(height)), 150)
# kernel = gaussian_x * gaussian_y.T
# mask = 255 * kernel / np.linalg.norm(kernel)
# mask = np.transpose(mask)
# mask = mask[0:int(1*(width)), 0:int(1*(height))]


# output = np.copy(img)
# for i in range(3):
#     output[:,:,i] = output[:,:,i] * mask
# cv2.imshow('Output', output)
# cv2.waitKey()






 # Histogram equalization 

# import cv2
# import numpy as np
# img = cv2.imread('flower.png')
# img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)

# img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])

# img_output = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)
# cv2.imshow('Color input image', img)
# cv2.imshow('output', img_output)
# cv2.waitKey(0)

# Chapter 2 complete /// 




# Chapter 3 (Cartoonize image)

# import cv2
# import numpy as np

# img = cv2.imread('flower.png')
# height,width = img.shape[:2]



# gaussian_x= cv2.getGaussianKernel(width, 150)
# gaussian_y= cv2.getGaussianKernel(height, 150)

# kernel = gaussian_x * gaussian_y.T

# mask = 255 * kernel / np.linalg.norm(kernel)

# output = np.copy(img)

# mask = np.transpose(mask)

# for i in range(3):
#     output[:,:,i]=    output[:,:,i] * mask

# cv2.imshow('output', output)
# cv2.waitKey()


# Accessing the webcam  
# import cv2 

# cap = cv2.VideoCapture(0)

# # Check if the webcam is opened correctly
# if not cap.isOpened():
#     raise IOError("Cannot open webcam")
# while True:
#     ret, frame = cap.read()
#     frame = cv2.resize(frame, None, fx=1, fy=1, interpolation=cv2.INTER_AREA)
#     cv2.imshow('Input', frame)

#     c = cv2.waitKey(1)
#     if c == 27:
#         break
# cap.release()
# cv2.destroyAllWindows()


# import cv2
# # Capture video
# cam = cv2.VideoCapture(1)

# # check if cam is not opened
# if not cam.isOpened():
#     raise IOError("Cannot open Cam")  

# # while true, iterate through frames until esc (ord('esc') == 27 is tapped )
# while True:
#     ret, frame = cam.read()
#     cv2.imshow('frame', frame )
#     c = cv2.waitKey(1)
#     if c == 27:
#         break


# # break cam to enable other programs use webcam 
# cam.release()
# cv2.destroyAllWindows()



# import argparse
# import cv2

# def argument_parser():
#     parser = argparse.ArgumentParser(description="Change color space of the \ input video stream using keyboard controls. The control keysare: \Grayscale - 'g', YUV - 'y', HSV - 'h'")
#     return parser

# if __name__=='__main__':
#     args = argument_parser().parse_args()
#     cap = cv2.VideoCapture(0)
#     # Check if the webcam is opened correctly
#     if not cap.isOpened():
#         raise IOError("Cannot open webcam")
#     cur_char = -1
#     prev_char = -1
#     while True:
#     # Read the current frame from webcam
#         ret, frame = cap.read()
#         # Resize the captured image
#         frame = cv2.resize(frame, None, fx=0.5, fy=0.5,
#         interpolation=cv2.INTER_AREA)
#         c = cv2.waitKey(1)
#         if c == 27:
#          break
#         if c > -1 and c != prev_char:
#            cur_char = c
#         prev_char = c
#         if cur_char == ord('g'):
#             output = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
#         elif cur_char == ord('y'):
#             output = cv2.cvtColor(frame, cv2.COLOR_BGR2YUV)
#         elif cur_char == ord('h'):
#             output = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

#         else:
#           output = frame
#         cv2.imshow('Webcam', output)
# cap.release()
# cv2.destroyAllWindows()



# import cv2 


# cam = cv2.VideoCapture(0)

# if not cam.isOpened():
#     raise IOError('Cannot access webcam')

# while True:
#     ret, frame = cam.read()
#     frame = cv2.flip(frame, 1)
#     cv2.imshow('Output', frame)

#     c =cv2.waitKey(1)
#     if c == 27:
#         break
# cam.release()
# cv2.destroyAllWindows()




# import argparse
# import cv2
# import numpy as np
# def argument_parser():
#     parser = argparse.ArgumentParser(
#         description="Change color space of the input video stream using keyboard controls. The control keys are: Grayscale - 'g', YUV - 'y', HSV - 'h'"
#     )
#     return parser

# if __name__ == '__main__':
#     # args = argument_parser().parse_args()
#     cap = cv2.VideoCapture(0)

#     # Check if the webcam is opened correctly
#     if not cap.isOpened():
#         raise IOError("Cannot open webcam")

#     cur_char = -1
#     prev_char = -1

#     while True:
#         # Read the current frame from webcam
#         ret, frame = cap.read()

#         if not ret:
#             break

#         # Resize the captured image
#         frame = cv2.resize(frame, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)
#         frame  = cv2.flip(frame,1)
#         # Capture keyboard input
#         c = cv2.waitKey(1)
#         if c == 27:  # ESC key
#             break
#         if c > -1 and c != prev_char:
#             cur_char = c
#             prev_char = c

#         # Change color space based on keyboard input
#         if cur_char == ord('g'):
#             output = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
#         elif cur_char == ord('y'):
#             output = cv2.cvtColor(frame, cv2.COLOR_BGR2YUV)
#         elif cur_char == ord('h'):
#             output = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
#         elif cur_char == ord('a'):
#             output = cv2.cvtColor(frame, 0)
#         elif cur_char == ord(' '):
#             my_matrix = np.array([[-1,-1,-1,-1,-1],[-1,2,2,2,-1],[-1,2,12,2,-1],[-1,2,2,2,-1], [-1,-1,-1,-1,-1]]) / 11
#             frame = cv2.filter2D(frame, -1, my_matrix)
#             # output = cv2.cvtColor(frame, cv2.COLOR_BGR2YUV)
#             # frame[:,:,0] = cv2.equalizeHist(frame[:,:,0]) 
#             output = cv2.cvtColor(frame, 0)
#         elif cur_char == ord('l'):
#             output = cv2.blur(frame, (6,6))
#         else:
#             output = frame 

#         # Display the processed frame
#         cv2.imshow('Output', output)

#     # Release resources
#     cap.release()
#     cv2.destroyAllWindows()


# Video Edge detection effect using canny  

import cv2
import numpy as np

cam = cv2.VideoCapture(0)

if not cam.isOpened():
    raise IOError('cam not opened')

current_key = -1
previous_key = -1

while True:
    ret, frame  =  cam.read()
    frame = cv2.flip(frame, 1)
    # frame_array = np.array([[-1,-1,-1,-1,-1],[-1,2,2,2,-1],[-1,2,25,2,-1],[-1,2,2,2,-1], [-1,-1,-1,-1,-1]]) / 24
    # frame_pic = cv2.filter2D(frame, -1, frame_array)
    # frame = frame_pic

    key = cv2.waitKey(1)
    if key == 27:
        break

    elif key > -1:
        current_key = key
    
    output = frame

    if current_key == ord('a'):
        # array = cv2.Sobel(frame, cv2.CV_64F, 0,1, ksize=3)
        array = cv2.Canny(frame, 25,150)
        output = array
        # output = cv2.filter2D(frame, -1 , array)
   
   
    cv2.imshow('Input', frame)
    cv2.imshow('Output', output)

cam.release()
cv2.destroyAllWindows()
       
 











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































